{"version":3,"sources":["github-brands.svg","App.jsx","components/User.jsx","components/SignUp.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","onFailure","response","console","error","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","redirect","handleSubmit","bind","assertThisInitialized","handleChange","addNotification","responseFacebook","notificationDOMRef","React","createRef","onSuccess","_this2","fetch","concat","code","method","then","res","json","localStorage","setItem","token","status","message","setState","catch","log","_this3","headers","Content-Type","Authorization","accessToken","current","title","type","insert","container","animationIn","animationOut","dismiss","duration","dismissable","click","e","_this4","preventDefault","myHeaders","Headers","append","body","JSON","stringify","evt","defineProperty","target","name","value","react_default","a","createElement","Redirect","to","react_notifications_component_default","ref","className","onSubmit","onChange","placeholder","required","href","style","textAlign","facebook_login_with_button_default","appId","fields","callback","transition","GitHubLogin_default","clientId","redirectUri","Component","User","firstname","lastname","imageURL","getItem","backgroundImage","SignUp","setTimeout","Boolean","window","location","hostname","match","routing","BrowserRouter","basename","process","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24861fd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-brands.ec5bc1b3.svg\";","/* eslint-disable no-console */\n/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react';\nimport FacebookLogin from 'react-facebook-login';\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { Redirect } from 'react-router-dom';\nimport './app.css';\nimport GitHubLogin from 'react-github-login';\nimport githubLogo from './github-brands.svg';\n\nconst onFailure = response => console.error(response);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: '',\n      password: '',\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addNotification = this.addNotification.bind(this);\n    this.responseFacebook = this.responseFacebook.bind(this);\n    this.notificationDOMRef = React.createRef();\n    this.onSuccess = this.onSuccess.bind(this);\n  }\n\n  onSuccess(response) {\n    fetch(`http://localhost:5000/githubAuth/access_token?code=${response.code}`, {\n      method: 'GET',\n    })\n      .then(res => res.json())\n      .then((res) => {\n        localStorage.setItem('token', res.token);\n        this.addNotification(res.status, res.message);\n        this.setState({ redirect: true });\n      })\n      .catch(console.log);\n  }\n\n  responseFacebook(response) {\n    fetch('http://localhost:5000/facebook/profile',\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${response.accessToken}`,\n        },\n      })\n      .then(res => res.json())\n      .then((res) => {\n        localStorage.setItem('token', res.token);\n        this.addNotification(res.status, res.message);\n        this.setState({ redirect: true });\n      })\n      .catch(console.log);\n  }\n\n  addNotification(status, message) {\n    this.notificationDOMRef.current.addNotification({\n      title: 'Result:',\n      message,\n      type: status,\n      insert: 'top',\n      container: 'top-right',\n      animationIn: ['animated', 'fadeIn'],\n      animationOut: ['animated', 'fadeOut'],\n      dismiss: { duration: 2000 },\n      dismissable: { click: true },\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    fetch('http://localhost:5000/auth/login',\n      {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password,\n        }),\n      })\n      .then(res => res.json())\n      .then((res) => {\n        localStorage.setItem('token', res.token);\n        this.addNotification(res.status, res.message);\n        this.setState({ redirect: true });\n      })\n      .catch(console.log);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to=\"/user\" />;\n    }\n    return (\n      <div>\n        <ReactNotification ref={this.notificationDOMRef} />\n        <div className=\"login-page\">\n          <div className=\"form\">\n            <form className=\"login-form\" onSubmit={this.handleSubmit}>\n              <input type=\"text\" onChange={this.handleChange} placeholder=\"username\" required name=\"username\" />\n              <input type=\"password\" onChange={this.handleChange} placeholder=\"password\" required name=\"password\" />\n              <button type=\"submit\" value=\"Submit\">login</button>\n              <p className=\"message\">\n            Not registered?\n                {' '}\n                <a href=\"/signup\">Create an account</a>\n              </p>\n            </form>\n          </div>\n        </div>\n        <div style={{ textAlign: 'center' }} className=\"socials\">\n          <div>\n            <FacebookLogin\n              appId=\"332647670678632\"\n              fields=\"name,email,picture\"\n              callback={this.responseFacebook}\n            />\n          </div>\n          <div>\n            <span style={{ transition: 'opacity 0.5s ease 0s' }}>\n              <GitHubLogin\n                clientId=\"ed4f0f433db3e37aa087\"\n                redirectUri=\"http://localhost:5000/githubAuth/return\"\n                onSuccess={this.onSuccess}\n                onFailure={onFailure}\n                className=\"kep-login-github metro\"\n              />\n            </span>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, Fragment } from 'react';\nimport './user.scss';\n\nclass User extends Component {\n  constructor() {\n    super();\n    this.state = {\n      firstname: '',\n      lastname: '',\n      username: '',\n      imageURL: '',\n    };\n  }\n\n  componentDidMount() {\n    const accessToken = localStorage.getItem('token');\n    fetch('http://localhost:5000/user/profile',\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n      .then(res => res.json())\n      .then((res) => {\n        this.setState({\n          firstname: res.firstname,\n          lastname: res.lastname,\n          imageURL: res.imageURL,\n          username: res.username,\n        });\n      })\n      .catch(console.log);\n  }\n\n  render() {\n    return (\n      <article className=\"card\">\n        <header style={{ backgroundImage: `url(${this.state.imageURL})` }} className=\"card-header\" />\n        <div className=\"card-body\">\n          <p className=\"date\">\n            Firstname:\n            {' '}\n            {this.state.firstname}\n          </p>\n          <p className=\"date\">\n            Lastname:\n            {' '}\n            {this.state.lastname}\n          </p>\n\n          <h2>{this.state.username}</h2>\n        </div>\n      </article>\n    );\n  }\n}\n\nexport default User;\n","/* eslint-disable no-useless-constructor */\n/* eslint-disable react/prefer-stateless-function */\nimport React, { Component } from 'react';\nimport '../app.css';\nimport ReactNotification from 'react-notifications-component';\nimport { Redirect } from 'react-router-dom';\nimport 'react-notifications-component/dist/theme.css';\n\nclass SignUp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      firstname: '',\n      lastname: '',\n      username: '',\n      password: '',\n      redirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addNotification = this.addNotification.bind(this);\n    this.notificationDOMRef = React.createRef();\n  }\n\n  addNotification(status, message) {\n    this.notificationDOMRef.current.addNotification({\n      title: 'Result:',\n      message,\n      type: status,\n      insert: 'top',\n      container: 'top-right',\n      animationIn: ['animated', 'fadeIn'],\n      animationOut: ['animated', 'fadeOut'],\n      dismiss: { duration: 2000 },\n      dismissable: { click: true },\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    fetch('http://localhost:5000/auth/register',\n      {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify({\n          lastname: this.state.lastname,\n          firstname: this.state.firstname,\n          username: this.state.username,\n          password: this.state.password,\n        }),\n      })\n      .then(res => res.json())\n      .then((res) => {\n        this.addNotification(res.status, res.message);\n        setTimeout(() => { this.setState({ redirect: true }); }, 1000);\n      })\n      .catch(console.log);\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to=\"/\" />;\n    }\n    return (\n      <div className=\"login-page\">\n        <ReactNotification ref={this.notificationDOMRef} />\n        <div className=\"form\">\n          <form className=\"login-form\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" onChange={this.handleChange} required placeholder=\"username\" name=\"username\" />\n            <input type=\"text\" onChange={this.handleChange} required placeholder=\"firstname\" name=\"firstname\" />\n            <input type=\"text\" onChange={this.handleChange} required placeholder=\"lastname\" name=\"lastname\" />\n            <input type=\"password\" onChange={this.handleChange} required placeholder=\"password\" name=\"password\" />\n            <button type=\"submit\">Sign Up</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignUp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable import/extensions */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport User from './components/User';\nimport SignUp from './components/SignUp';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <div>\n      <div className=\"header\">\n        <div><a href={`${process.env.PUBLIC_URL}/`}>Home</a></div>\n        <div><a href={`${process.env.PUBLIC_URL}/user`}>User</a></div>\n        <div><a href={`${process.env.PUBLIC_URL}/signup`}>Sign Up</a></div>\n      </div>\n\n      <Route exact path={`${process.env.PUBLIC_URL}/`} component={App} />\n      <Route exact path={`${process.env.PUBLIC_URL}/user`} component={User} />\n      <Route exact path={`${process.env.PUBLIC_URL}/signup`} component={SignUp} />\n    </div>\n  </Router>\n);\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}